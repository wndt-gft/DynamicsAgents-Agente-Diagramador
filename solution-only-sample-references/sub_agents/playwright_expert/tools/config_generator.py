"""Playwright Configuration Generator - Generates expert Playwright configurations."""

from typing import List, Dict, Any


def generate_playwright_expert_config(
    domain: str,
    browsers: List[str],
    devices: List[str],
    include_mobile_testing: bool
) -> str:
    """Generate expert Playwright configuration."""

    browser_configs = _generate_browser_configs(browsers)
    device_configs = _generate_device_configs(devices, include_mobile_testing)

    return f"""// playwright.config.js
// Generated by PlaywrightWeb_Expert - Cross-browser Configuration
// Domain: {domain} | Optimized for: {', '.join(browsers)}

const {{ defineConfig, devices }} = require('@playwright/test');

module.exports = defineConfig({{
  // Test directory configuration
  testDir: './tests',
  testMatch: '**/*.spec.js',
  
  // Global test configuration
  timeout: 30000,
  expect: {{
    timeout: 10000
  }},
  
  // Reporter configuration
  reporter: [
    ['html', {{ outputFolder: 'playwright-report' }}],
    ['json', {{ outputFile: 'test-results.json' }}],
    ['junit', {{ outputFile: 'junit-results.xml' }}],
    ['allure-playwright']
  ],
  
  // Global setup and teardown
  globalSetup: require.resolve('./global-setup'),
  globalTeardown: require.resolve('./global-teardown'),
  
  // Use configuration
  use: {{
    // Base URL for tests
    baseURL: process.env.BASE_URL || 'https://{domain}.com',
    
    // Global test settings
    trace: 'on-first-retry',
    screenshot: 'only-on-failure',
    video: 'retain-on-failure',
    
    // Browser settings
    headless: process.env.CI ? true : false,
    viewport: {{ width: 1280, height: 720 }},
    
    // Network settings
    ignoreHTTPSErrors: true,
    bypassCSP: true,
    
    // Timeouts
    actionTimeout: 10000,
    navigationTimeout: 30000
  }},

  // Projects for different browsers and devices
  projects: [
{browser_configs}
{device_configs}
  ],

  // Web server configuration for local development
  webServer: {{
    command: 'npm run start:test',
    port: 3000,
    reuseExistingServer: !process.env.CI,
    timeout: 120000
  }},

  // Retry configuration
  retries: process.env.CI ? 2 : 0,
  
  // Worker configuration
  workers: process.env.CI ? 1 : undefined,
  
  // Fail fast configuration
  maxFailures: process.env.CI ? 5 : undefined
}});"""


def _generate_browser_configs(browsers: List[str]) -> str:
    """Generate browser-specific configurations."""

    browser_map = {
        "chromium": {
            "name": "chromium",
            "use": "{ ...devices['Desktop Chrome'] }"
        },
        "firefox": {
            "name": "firefox",
            "use": "{ ...devices['Desktop Firefox'] }"
        },
        "webkit": {
            "name": "webkit",
            "use": "{ ...devices['Desktop Safari'] }"
        }
    }

    configs = []
    for browser in browsers:
        if browser in browser_map:
            config = f"""    {{
      name: '{browser_map[browser]["name"]}',
      use: {browser_map[browser]["use"]}
    }},"""
            configs.append(config)

    return '\n'.join(configs)


def _generate_device_configs(devices: List[str], include_mobile: bool) -> str:
    """Generate device-specific configurations."""

    if not include_mobile:
        return ""

    device_configs = []

    if "mobile" in devices:
        device_configs.append("""    {
      name: 'Mobile Chrome',
      use: { ...devices['Pixel 5'] }
    },
    {
      name: 'Mobile Safari',
      use: { ...devices['iPhone 12'] }
    },""")

    if "tablet" in devices:
        device_configs.append("""    {
      name: 'Tablet',
      use: { ...devices['iPad Pro'] }
    },""")

    return '\n'.join(device_configs)
