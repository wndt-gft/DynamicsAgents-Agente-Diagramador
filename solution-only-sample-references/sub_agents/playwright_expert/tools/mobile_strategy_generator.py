"""Playwright Mobile Testing Generator - Generates mobile testing strategies."""

from typing import List


def generate_mobile_testing_strategy(devices: List[str], domain: str) -> str:
    """Generate mobile testing strategy for Playwright."""

    return f"""// strategies/mobile_testing_strategy.js
// Generated by PlaywrightWeb_Expert - Mobile Testing Strategy
// Domain: {domain} | Target Devices: {', '.join(devices)}

const {{ devices }} = require('@playwright/test');

class MobileTestingStrategy {{
  constructor() {{
    this.supportedDevices = {{
      'mobile': [
        'iPhone 12',
        'iPhone 13',
        'Pixel 5',
        'Galaxy S21'
      ],
      'tablet': [
        'iPad Pro',
        'iPad Air',
        'Galaxy Tab S7'
      ]
    }};
  }}

  async testResponsiveBreakpoints(page) {{
    const breakpoints = [
      {{ name: 'mobile-small', width: 320, height: 568 }},
      {{ name: 'mobile-medium', width: 375, height: 667 }},
      {{ name: 'mobile-large', width: 414, height: 896 }},
      {{ name: 'tablet-portrait', width: 768, height: 1024 }},
      {{ name: 'tablet-landscape', width: 1024, height: 768 }}
    ];

    const results = [];

    for (const breakpoint of breakpoints) {{
      await page.setViewportSize({{ 
        width: breakpoint.width, 
        height: breakpoint.height 
      }});
      
      await page.waitForTimeout(500); // Allow layout to adjust
      
      const layoutValid = await this.validateMobileLayout(page, breakpoint.name);
      results.push({{
        breakpoint: breakpoint.name,
        dimensions: `${{breakpoint.width}}x${{breakpoint.height}}`,
        isValid: layoutValid
      }});
    }}

    return results;
  }}

  async validateMobileLayout(page, breakpointName) {{
    try {{
      if (breakpointName.includes('mobile')) {{
        const hasAccessibleContent = await page.locator('main, [role="main"]').isVisible();
        return hasAccessibleContent;
      }} else {{
        const hasOptimizedLayout = await page.locator('main').isVisible();
        return hasOptimizedLayout;
      }}
    }} catch (error) {{
      console.warn(`Layout validation failed for ${{breakpointName}}:`, error.message);
      return false;
    }}
  }}
}}

module.exports = {{ MobileTestingStrategy }};"""
