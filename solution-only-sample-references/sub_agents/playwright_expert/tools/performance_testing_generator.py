"""Playwright Performance Testing Generator - Generates performance testing utilities."""

from typing import Dict, Any


def generate_playwright_performance_testing(domain: str) -> str:
    """Generate performance testing utilities for Playwright."""

    return f"""// utils/performance_testing.js
// Generated by PlaywrightWeb_Expert - Performance Testing Utilities
// Domain: {domain} | Web Performance Monitoring

class PerformanceTestingUtils {{
  constructor(page) {{
    this.page = page;
    this.metrics = {{}};
  }}

  async measurePageLoadPerformance() {{
    const performanceMetrics = await this.page.evaluate(() => {{
      const navigation = performance.getEntriesByType('navigation')[0];
      const paint = performance.getEntriesByType('paint');
      
      return {{
        domProcessing: navigation.domContentLoadedEventStart - navigation.responseEnd,
        domContentLoaded: navigation.domContentLoadedEventEnd - navigation.domContentLoadedEventStart,
        loadComplete: navigation.loadEventEnd - navigation.loadEventStart,
        firstPaint: paint.find(p => p.name === 'first-paint')?.startTime || 0,
        firstContentfulPaint: paint.find(p => p.name === 'first-contentful-paint')?.startTime || 0,
        totalLoadTime: navigation.loadEventEnd - navigation.fetchStart
      }};
    }});

    this.metrics.pageLoad = performanceMetrics;
    return performanceMetrics;
  }}

  async measureLargestContentfulPaint() {{
    return await this.page.evaluate(() => {{
      return new Promise((resolve) => {{
        const observer = new PerformanceObserver((list) => {{
          const entries = list.getEntries();
          const lastEntry = entries[entries.length - 1];
          resolve(lastEntry ? lastEntry.startTime : 0);
        }});
        
        observer.observe({{ entryTypes: ['largest-contentful-paint'] }});
        setTimeout(() => resolve(0), 5000);
      }});
    }});
  }}

  async runFullPerformanceAudit() {{
    console.log('Starting performance audit for {domain}...');
    
    const [pageLoadMetrics, lcpTime] = await Promise.all([
      this.measurePageLoadPerformance(),
      this.measureLargestContentfulPaint()
    ]);

    const performanceReport = {{
      timestamp: new Date().toISOString(),
      domain: '{domain}',
      coreWebVitals: {{
        lcp: {{ value: lcpTime, rating: this.rateLCP(lcpTime) }}
      }},
      pageLoad: pageLoadMetrics,
      overallScore: this.calculateOverallScore(lcpTime, pageLoadMetrics)
    }};

    this.metrics.fullAudit = performanceReport;
    return performanceReport;
  }}

  rateLCP(lcp) {{
    if (lcp <= 2500) return 'good';
    if (lcp <= 4000) return 'needs-improvement';
    return 'poor';
  }}

  calculateOverallScore(lcp, pageLoad) {{
    const lcpScore = this.rateLCP(lcp) === 'good' ? 100 : this.rateLCP(lcp) === 'needs-improvement' ? 75 : 50;
    const loadScore = pageLoad.totalLoadTime <= 3000 ? 100 : pageLoad.totalLoadTime <= 5000 ? 75 : 50;
    return Math.round((lcpScore + loadScore) / 2);
  }}
}}

module.exports = {{ PerformanceTestingUtils }};"""
