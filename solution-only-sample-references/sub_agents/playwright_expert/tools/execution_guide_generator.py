"""Playwright Execution Guide Generator - Generates execution and debugging guides."""

from typing import List


def generate_playwright_execution_guide(browsers: List[str], devices: List[str]) -> str:
    """Generate execution guide for Playwright tests."""

    return f"""# Playwright Test Execution Guide
Generated by PlaywrightWeb_Expert - Cross-browser Testing Specialist

## Overview
This guide provides comprehensive instructions for executing Playwright tests across different browsers and devices.

**Supported Browsers:** {', '.join(browsers)}
**Target Devices:** {', '.join(devices)}

## Quick Start Commands

### Basic Test Execution
```bash
# Run all tests
npx playwright test

# Run tests in headed mode (visible browser)
npx playwright test --headed

# Run tests in a specific browser
npx playwright test --project=chromium
npx playwright test --project=firefox
npx playwright test --project=webkit
```

### Advanced Execution Options
```bash
# Run tests with debugging
npx playwright test --debug

# Run tests with trace recording
npx playwright test --trace on

# Run specific test file
npx playwright test tests/homepage.spec.js

# Run tests matching a pattern
npx playwright test --grep "login"
```

## Cross-Browser Testing
```bash
# Run tests across all browsers
npx playwright test --project=chromium --project=firefox --project=webkit

# Parallel execution by browser
npx playwright test --workers=3
```

## Reporting and Output
```bash
# HTML report (default)
npx playwright test --reporter=html

# View test results
npx playwright show-report
```
"""


def generate_playwright_debugging_guide(domain: str) -> str:
    """Generate debugging guide for Playwright tests."""

    return f"""# Playwright Debugging Guide
Generated by PlaywrightWeb_Expert - Debugging Specialist
Domain: {domain}

## Debug Mode Execution

### Basic Debugging
```bash
# Run in debug mode with browser visible
npx playwright test --debug

# Debug specific test
npx playwright test tests/login.spec.js --debug
```

## Interactive Debugging

### Using Playwright Inspector
```javascript
// Add breakpoint in test code
await page.pause(); // This will open Playwright Inspector

// Step through test execution
await page.step('Login process', async () => {{
  await page.fill('#username', 'testuser');
  await page.fill('#password', 'password');
  await page.click('#login-button');
}});
```

## Visual Debugging

### Screenshots for Debugging
```javascript
// Take full page screenshot
await page.screenshot({{ 
  path: 'debug-fullpage.png', 
  fullPage: true 
}});

// Take element screenshot
await page.locator('#problematic-element').screenshot({{
  path: 'debug-element.png'
}});
```

## Best Practices

1. **Use Descriptive Test Names**: Makes debugging easier
2. **Add Console Logs**: Strategic logging helps track execution
3. **Take Screenshots**: Visual evidence of failures
4. **Use page.pause()**: Interactive debugging sessions
5. **Monitor Network**: Check API calls and responses
"""
