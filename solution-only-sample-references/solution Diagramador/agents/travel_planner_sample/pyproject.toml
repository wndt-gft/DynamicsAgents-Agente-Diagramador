[project]
name = "travel-planner"
version = "0.1.1"
description = "Travel Planner multi-agent concierge built with the Dynamic Agents Starter Pack."
authors = [
    { name = "Google LLC" },
]
readme = "README.md"
license = { text = "Apache-2.0" }
requires-python = ">=3.10,<3.13"
keywords = ["dynamics-agents", "google", "travel", "planner", "agent"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    "google-adk>=1.14.0,<2.0.0",
    "google-cloud-aiplatform[evaluation,agent-engines]~=1.103.0",
    "google-cloud-logging~=3.11.4",
    "opentelemetry-exporter-gcp-trace~=1.9.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.3.4",
    "pytest-asyncio>=0.23.8",
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.12.0",
    "pytest-timeout>=2.2.0",
    "pytest-xdist>=3.5.0",
    "nest-asyncio>=1.6.0",
    "locust>=2.20.0",
    "ipython>=8.18.0",
    "ipdb>=0.13.13",
]

jupyter = [
    "jupyter~=1.0.0",
    "notebook>=7.0.0",
    "ipywidgets>=8.1.0",
]

lint = [
    "ruff>=0.4.6",
    "black>=24.0.0",
    "isort>=5.13.0",
    "mypy~=1.15.0",
    "codespell~=2.2.0",
    "types-pyyaml~=6.0.12.20240917",
    "types-requests~=2.32.0.20240914",
    "types-aiofiles>=23.0.0",
]

docs = [
    "sphinx>=7.2.0",
    "sphinx-rtd-theme>=2.0.0",
    "sphinx-autodoc-typehints>=1.25.0",
    "myst-parser>=2.0.0",
]

prod = [
    "gunicorn>=21.2.0",
    "prometheus-client>=0.19.0",
    "opentelemetry-instrumentation-fastapi>=0.43b0",
]

[project.urls]
"Source" = "https://github.com/GoogleCloudPlatform/agent-starter-pack"
"Bug Reports" = "https://github.com/GoogleCloudPlatform/agent-starter-pack/issues"
"Documentation" = "https://googlecloudplatform.github.io/agent-starter-pack/"

[project.scripts]
travel-planner = "app.agent:run"
travel_planner = "app.agent:run"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.version]
path = "app/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["app"]

[tool.hatch.build.targets.sdist]
include = [
    "/app",
    "/tests",
    "/docs",
    "/README.md",
    "/LICENSE",
    "/pyproject.toml",
]
exclude = [
    "/.git",
    "/.github",
    "/__pycache__",
    "/.pytest_cache",
    "/.mypy_cache",
    "/.ruff_cache",
    "/htmlcov",
    "/.coverage",
    "*.pyc",
    "*.pyo",
    "*.pyd",
    ".DS_Store",
]

[tool.ruff]
line-length = 88
target-version = "py310"
fix = true
show-fixes = true

[tool.ruff.lint]
select = [
    "E",
    "F",
    "W",
    "I",
    "C",
    "B",
    "UP",
    "RUF",
    "S",
    "DTZ",
    "T20",
    "SIM",
    "PTH",
]
ignore = [
    "E501",
    "C901",
    "S101",
    "T201",
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "S106", "T201"]

[tool.ruff.lint.isort]
known-first-party = ["app"]
combine-as-imports = true
force-wrap-aliases = true

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.black]
line-length = 88
target-version = ["py310", "py311", "py312"]
include = "\\.pyi?$"
extend-exclude = '''
/(
    \\.git
  | \\.mypy_cache
  | \\.ruff_cache
  | \\.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 88
known_first_party = ["app"]
skip_gitignore = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
no_implicit_optional = true
check_untyped_defs = true
disallow_subclassing_any = true
warn_incomplete_stub = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_unreachable = true
follow_imports = "silent"
ignore_missing_imports = true
explicit_package_bases = true
disable_error_code = ["misc", "no-untyped-call", "no-any-return"]
exclude = [".venv", "build", "dist"]

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_untyped_calls = false

[tool.codespell]
ignore-words-list = "rouge,adk,llm"
skip = "./locust_env/*,uv.lock,.venv,**/*.ipynb,htmlcov,*.min.js,*.min.css"
check-filenames = true
check-hidden = false

[tool.pytest.ini_options]
pythonpath = "."
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--verbose",
    "--tb=short",
    "--strict-markers",
    "--disable-warnings",
    "--durations=10",
]
markers = [
    "unit: Unit tests for individual components",
    "integration: Integration tests for component interaction",
    "load: Load and performance tests",
    "slow: Tests that take longer than 5 seconds",
    "smoke: Quick smoke tests for basic functionality",
    "regression: Regression tests for bug fixes",
    "edge_case: Edge case and boundary condition tests",
    "asyncio: Asynchronous tests",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning",
    "ignore::Warning:coverage.*",
    "ignore::Warning:pytest_cov.*",
]
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s - %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
log_file = "tests.log"
log_file_level = "DEBUG"
log_file_format = "%(asctime)s [%(levelname)8s] %(name)s - %(message)s"
log_file_date_format = "%Y-%m-%d %H:%M:%S"

[tool.coverage.run]
source = ["app"]
branch = true
parallel = true
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/config/*",
    "*/settings/*",
    "*/static/*",
    "*/templates/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
show_missing = true
skip_covered = false
fail_under = 90
precision = 2
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.",
    "if TYPE_CHECKING:",
    "if typing.TYPE_CHECKING:",
    "@abstractmethod",
    "@abc.abstractmethod",
    "except ImportError:",
    "except ModuleNotFoundError:",
    "class .*\\bProtocol\\):",
]

[tool.coverage.html]
directory = "htmlcov"
title = "Travel Planner Test Coverage Report"

[tool.coverage.xml]
output = "coverage.xml"

[tool.coverage.json]
output = "coverage.json"
pretty_print = true

[dependency-groups]
test = [
    "pytest>=8.3.4",
    "pytest-asyncio>=0.23.8",
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.12.0",
]
quality = [
    "ruff>=0.4.6",
    "black>=24.0.0",
    "mypy~=1.15.0",
]
all = [
    "travel-planner[dev,lint,docs,prod]",
]
