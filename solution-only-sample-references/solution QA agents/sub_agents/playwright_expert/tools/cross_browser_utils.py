"""Playwright Cross-Browser Utilities Generator - Generates cross-browser compatibility utilities."""

from typing import List


def generate_cross_browser_utilities(browsers: List[str], domain: str) -> str:
    """Generate cross-browser utilities for enhanced compatibility."""

    return f"""// utils/cross_browser_utils.js
// Generated by PlaywrightWeb_Expert - Cross-browser Utilities
// Domain: {domain} | Browsers: {', '.join(browsers)}

class CrossBrowserUtils {{
  constructor(page, browserName) {{
    this.page = page;
    this.browserName = browserName;
  }}

  async waitForElement(selector, options = {{}}) {{
    const defaultTimeout = this.getBrowserTimeout();
    const mergedOptions = {{ timeout: defaultTimeout, ...options }};
    
    return await this.page.waitForSelector(selector, mergedOptions);
  }}

  async clickWithCompatibility(selector) {{
    await this.waitForElement(selector);
    
    // Browser-specific click handling
    if (this.browserName === 'webkit') {{
      // Safari sometimes needs forced clicks
      await this.page.locator(selector).click({{ force: true }});
    }} else if (this.browserName === 'firefox') {{
      // Firefox benefits from scroll into view first
      await this.page.locator(selector).scrollIntoViewIfNeeded();
      await this.page.locator(selector).click();
    }} else {{
      // Chromium standard click
      await this.page.locator(selector).click();
    }}
  }}

  getBrowserTimeout() {{
    const timeouts = {{
      'webkit': 15000,    // Safari needs more time
      'firefox': 12000,   // Firefox is moderate
      'chromium': 10000   // Chrome is fastest
    }};
    
    return timeouts[this.browserName] || 10000;
  }}

  async handleBrowserSpecificBehavior() {{
    switch (this.browserName) {{
      case 'webkit':
        await this.handleSafariQuirks();
        break;
      case 'firefox':
        await this.handleFirefoxQuirks();
        break;
      case 'chromium':
        await this.handleChromeQuirks();
        break;
    }}
  }}

  async takeCompatibleScreenshot(name) {{
    const timestamp = Date.now();
    const filename = `${{name}}_${{this.browserName}}_${{timestamp}}.png`;
    
    await this.page.screenshot({{
      path: `screenshots/${{filename}}`,
      fullPage: true
    }});
    return filename;
  }}
}}

module.exports = {{ CrossBrowserUtils }};"""
